import * as React from "react";
import { useContext, useEffect } from "react";
import { styled } from '@mui/material/styles';
import Paper from "@mui/material/Paper";
import Table from "@mui/material/Table";
import TableBody from "@mui/material/TableBody";
import TableCell, { tableCellClasses } from '@mui/material/TableCell';
import TableContainer from "@mui/material/TableContainer";
import TableHead from "@mui/material/TableHead";
import TablePagination from "@mui/material/TablePagination";
import TableRow from "@mui/material/TableRow";
import styles from './Realtime.module.css';
import { Context } from "../../context/Contexts";

const StyledTableCell = styled(TableCell)(({ theme }) => ({
    [`&.${tableCellClasses.head}`]: {
        backgroundColor: theme.palette.common.black,
        color: theme.palette.common.white,
    },
    [`&.${tableCellClasses.body}`]: {
        fontSize: 14,
    },
}));

const columns = [
    { id: "name", label: "Data Feeds", minWidth: 170 },
    { id: "code", label: "Type", minWidth: 100 },
    {
        id: "population",
        label: "Description",
        minWidth: 170,
        align: "right",
        format: (value) => value.toLocaleString("en-US")
    },

];

function createData(name, code, population) {
    return { name, code, population };
}

const rows = [
    createData("Carbon Intensity", "Realtime (Regional)", "Carbon Intensity for Swansea Region"),
    createData("Energy Frequency", "Realtime (National)", "Energy Frequency for UK from Elexon"),
    createData("Energy Demand", "Realtime (National)", "Energy Demand for UK from Elexon"),
    createData(
        "Wind Energy Production",
        "Realtime (Regional)",
        "Wind Energy Value for Swansea from Elexon",

    ),
    createData(
        "Solar Energy Production",
        "Realtime (Regional)",
        "Wind Energy Value for Swansea from Elexon",

    ),
    createData("Daily Energy Transmit", "Realtime (Regional)", "Energy Transmission Value of UK"),
    createData(
        "Energy Generated By Fuel",
        "Realtime (National)",
        "Energy Generated by Fuel for Swansea from Elexon",

    ),
    createData("Energy Price", "Realtime (National)", "Energy Price for UK from Elexon"),
    createData("Weather", "Realtime (Regional)", "Weather Data for Swansea"),
    createData(
        "STOR DA Auction result",
        "Realtime (National)",
        "Auction Result for UK from National Grid ESO",


    ),
    createData(
        "Historic GTMA Trades Data",
        "Realtime (National)",
        "Trade data for UK from National Grid ESO",

    ),
    createData(" Daily Balancing Cost", "Realtime (National)", "Balancing Cost of Energy for UK"),
    createData(
        "Current Settlement Final BSUoS Data",
        "Realtime (National)",
        "Daily Balancing Cost for UK from National Grid ESO",

    ),
];

export default function Realtime() {
    const context = useContext(Context);
    useEffect(() => {
        context.setShowNavTop(true);
    }, [context]);

    const [page, setPage] = React.useState(0);
    const [rowsPerPage, setRowsPerPage] = React.useState(10);

    const handleChangePage = (event, newPage) => {
        setPage(newPage);
    };

    const handleChangeRowsPerPage = (event) => {
        setRowsPerPage(+event.target.value);
        setPage(0);
    };

    return (
        <div className={[styles.register, context.close ? styles.close : ""].join(" ")}>
            <Paper sx={{ width: "100%" }}>
                <TableContainer sx={{ maxHeight: 440 }}>
                    <Table stickyHeader aria-label="sticky table">
                        <TableHead>
                            <TableRow>
                                <StyledTableCell align="center" colSpan={12} style={{ fontWeight: "bold", fontSize: "25px" }}>
                                    Kendra Sustain Data Feeds
                                </StyledTableCell>
                                {/* <TableCell align="center" colSpan={3}>
                Details
              </TableCell> */}
                            </TableRow>
                            <TableRow>
                                {columns.map((column) => (
                                    <TableCell
                                        key={column.id}
                                        align={column.align}
                                        style={{ top: 57, minWidth: column.minWidth }}
                                    >
                                        {column.label}
                                    </TableCell>
                                ))}
                            </TableRow>
                        </TableHead>
                        <TableBody>
                            {rows
                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
                                .map((row) => {
                                    return (
                                        <TableRow hover role="checkbox" tabIndex={-1} key={row.code}>
                                            {columns.map((column) => {
                                                const value = row[column.id];
                                                return (
                                                    <TableCell key={column.id} align={column.align}>
                                                        {column.format && typeof value === "number"
                                                            ? column.format(value)
                                                            : value}
                                                    </TableCell>
                                                );
                                            })}
                                        </TableRow>
                                    );
                                })}
                        </TableBody>
                    </Table>
                </TableContainer>
                <TablePagination
                    rowsPerPageOptions={[10, 25, 100]}
                    component="div"
                    count={rows.length}
                    rowsPerPage={rowsPerPage}
                    page={page}
                    onPageChange={handleChangePage}
                    onRowsPerPageChange={handleChangeRowsPerPage}
                />
            </Paper>
        </div>
    );
}
